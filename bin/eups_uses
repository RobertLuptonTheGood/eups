#!@SYSTEM_PYTHON@
# -*- python -*-
#
# List all the products which depend on a given product/version
#
# This script is DEPRECATED; use "eups uses" instead.
#
import os, re, sys
import shutil
import ooeups as eups
import eups.Getopt as eupsGetopt
    
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
#
# Deal with arguments
#
options = {
    "-d" : (True,  "--depth", "Only search down this many layers of dependency"),
    "-f" : (True,  "--flavor", "Use this flavor. Default: $EUPS_FLAVOR or `eups_flavor`"),
    "-h" : (False, "--help", "Print this help message"),
    "-o" : (False, "--optional", "Show optional setups"),
    "-q" : (False, "--quiet", "Suppress some warning messages"),
    "-Z" : (True,  "--database", "Use this products path. Default: $EUPS_PATH"),
    "-z" : (True,  "--select-db", "Select the product paths which contain this directory.\nDefault: all"),
    }
aliases = {}

try:
    opts = eupsGetopt.Getopt(options, sys.argv, aliases, "eups_uses [options] product [version]")
except RuntimeError, param:
    print >> sys.stderr, "Error parsing arguments: %s" % param
    sys.exit(1)

if not opts.has_option('-q'):
    print >> sys.stderr, '\nWarning: this tool is DEPRECATED; use "eups uses" instead\n'

if opts.has_option('-h'):
    print >> sys.stderr, "List everything which depends on the specified product and (optionally) version\n"
    opts.usage()
    sys.exit(0)

depth = 9999
if opts.has_option('-d'):
    depth = int(opts.options['-d'])

if opts.has_option('-f'):
    flavor = opts.options['-f']
else:
    flavor = eups.flavor()

showOptional = opts.has_option('-o')

quiet = opts.has_option('-q')
#
# Figure out which database to use
#
if opts.has_option('-Z'):
    eups.setPath(opts.options['-Z'])

dbz = ""
if opts.has_option('-z'):
    dbz = opts.options['-z']

try:
    eups_path = eups.path()
    db = eups.selectPathComponent(dbz)
except RuntimeError, e:
    print >> sys.stderr, e
    sys.exit(1)

try:
    product = opts.argv[0]
except IndexError:
    print >> sys.stderr, "Please specify a product"
    sys.exit(1)    

try:
    version = opts.argv[1]
except IndexError:
    version = None
    
if len(opts.argv) > 2:
    print >> sys.stderr, "Junk at end of arguments:", " ".join(opts.argv[2:])
    sys.exit(1)    
#
# Do the work
#
fmt = "%-20s %-15s"
if version:                             # we know the product version, so don't print it again
    print fmt % ("product", "version")
else:
    fmt += " %-15s"
    print fmt % ("product", "version", "%s version" % product)

try:
    for (p, pv, requestedInfo) in eups.uses(product, version, dbz, flavor, depth, quiet):
        requestedVersion, optional = requestedInfo
        
        if optional and not showOptional:
            continue
        
        if version:
            str = fmt % (p, pv)
        else:
            str = fmt % (p, pv, requestedVersion)

        if showOptional:
            if optional:
                str += "Optional"

        print str
except RuntimeError, e:
    print >> sys.stderr, e
    sys.exit(1)
