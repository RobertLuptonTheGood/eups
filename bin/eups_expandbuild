#!@SYSTEM_PYTHON@
#
# Expand a .build file, looking for variables @NAME@ and substituting
# them appropriately:
#
# @CVSROOT@ => current value of CVSROOT from ./CVS/Root or $CVSROOT
# @VERSION@ => installed version name
#
#
# This script is DEPRECATED; use "eups expandbuild" instead.
#
import os, re, sys
import ooeups as eups
import eups.distrib.builder as eupsDistribBuild

#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
#
# Deal with arguments
#
options = {
    "-c": (True, '--cvs', "Use this CVSROOT"),
    "-h": (False, "--help", "Print this help message"),
    "-i": (False, "--inplace", "Modify file in situ"),
    "-p": (True, '--product', "The name of the product"),
    "-s": (True, '--svn', "Use this SVNROOT"),
    "-v": (False, "--verbose", "Be chattier (repeat for even more chat)"),
    "-V": (True, "--version", "Specify version that you're installing"),
    }

aliases = {}

try:
    opts = eups.Getopt(options, sys.argv, aliases, "eups_expandbuild [options] -V version buildFile [outDir]")
except RuntimeError, param:
    print >> sys.stderr, "Error parsing arguments: %s" % param
    sys.exit(1)

if not opts.has_option('-q'):
    print >> sys.stderr, '\nWarning: this tool is DEPRECATED; use "eups expandbuild" instead\n'

if opts.has_option('-h'):
    opts.usage()

    print >> sys.stderr, """\
    
Expand a .build file as part of installing it.

If outDir is provided, the expanded file will be written there;
otherwise it'll be written to stdout unless you specify --inplace.\
"""
    sys.exit(0)

cvsroot = None
if opts.has_option('-c'):
    cvsroot = opts.options['-c']

in_situ = opts.has_option('-i')

product = None
if opts.has_option('-p'):
    product = opts.options['-p']

svnroot = None
if opts.has_option('-s'):
    svnroot = opts.options['-s']

verbose = opts.has_option('-v')

version = None
if opts.has_option('-V'):
    version = opts.options['-V']
else:
    print >> sys.stderr, "Please specify a version with --version or -V"
    sys.exit(1)
    
if len(opts.argv) == 0:
    print >> sys.stderr, "Please specify a build file"
    sys.exit(1);
else:
    buildFile = opts.argv[0]
    opts.argv = opts.argv[1:]

if len(opts.argv) == 0:
    outdir = None
else:
    if in_situ:
        print >> sys.stderr, "You may not specify both --inplace and a target directory"
        sys.exit(1);
        
    outdir = opts.argv[0]
    opts.argv = opts.argv[1:]

if len(opts.argv) != 0:
    print >> sys.stderr, "Unprocessed arguments: %s; quitting" % " ".join(opts.argv)
    sys.exit(1);
    
#
# Guess the value of PRODUCT
#
if product:
    pass
else:
    mat = re.search(r"^([^.]+)\.build$", os.path.basename(buildFile))
    if mat:
        product = mat.group(1)
#
# Actually open the file and do the work
#
backup = None
try:
    if in_situ:
        backup = buildFile + ".bak"
        os.rename(buildFile, backup)
        ifd = open(backup, "r")
    else:
        ifd = open(buildFile)
except IOError, e:
    if backup and os.path.exists(backup):
        os.rename(backup, buildFile)
        os.unlink(backup)

    print >> sys.stderr, "Failed to open file \"%s\" for read" % buildFile
    sys.exit(1)

if outdir:
    outfile = os.path.join(outdir, os.path.basename(buildFile))
    if verbose:
        print "Writing to %s" % outfile

    try:
        ofd = open(outfile, "w")
    except IOError, e:
        print >> sys.stderr, "Failed to open file \"%s\" for write" % outfile
        sys.exit(1)
elif in_situ:
    try:
        ofd = open(buildFile, "w")
    except Exception:
        if backup and os.path.exists(backup):
            os.rename(backup, buildFile)
            os.unlink(backup)
else:
    ofd = sys.stdout
#
# Actually do the work
#
try:
    eupsDistribBuilder.expandBuildFile(ofd, ifd, product, version, verbose, svnroot=svnroot, cvsroot=cvsroot)
except Exception, e:
    if backup and os.path.exists(backup):
        os.rename(backup, buildFile)

    print >> sys.stderr, e
    sys.exit(1)

if backup and os.path.exists(backup):
    os.unlink(backup)
