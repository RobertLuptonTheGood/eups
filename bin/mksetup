#!/usr/bin/env python
#
import os, re, sys

sys.argv.pop(0)                         # remove script name
try:
    eupsdir = sys.argv.pop(0)
    prefix = sys.argv.pop(0)
except IndexError:
    print >> sys.stderr, "Usage: mksetup EUPS_DIR EUPS_PATH [SETUP_ALIASES]"

    sys.exit(1)

try:
    vals = sys.argv.pop(0).split(":")
    setup_aliases = {"setup" : vals[0], "unsetup" : vals[1]}
except IndexError:
    setup_aliases = {}

ups_db = os.path.join(prefix, "ups_db")

bindir = os.path.join("$EUPS_DIR","bin")
pythondir = os.path.join("$EUPS_DIR","python")
setup = os.path.join('$EUPS_DIR',"bin","eups_setup");

# Keep only one copy of each directory in sys.argv[1], but make sure that sys.argv[2] is present
unique_path="""
import sys
pp = []
for d in sys.argv[1].split(":"):
    if d and d not in pp:
        pp += [d]
if not sys.argv[2] in pp:
    pp = [sys.argv[2]] + pp
print ":".join(pp)"""

print "Writing a csh startup script";
try:
    fd = open("setups.csh", "w")
except IOError, e:
    print >> sys.stderr, "Unable to open setups.csh: %s" % e
    sys.exit(1)
#
# Problems with multi-line scripts in csh required us to use a
# here document, and pre-substitute the path rather than pass
# it in from the command line
#
unique_eups_path = unique_path
unique_eups_path = re.sub(r"sys\.argv\[1\]", "\"$EUPS_PATH\"", unique_eups_path)
unique_eups_path = re.sub(r"sys\.argv\[2\]", "\"%s\"" % prefix, unique_eups_path)

print >> fd, """
setenv EUPS_SHELL csh

if ("$?EUPS_DIR" == "1" ) then
   setenv PATH `echo $PATH | perl -pe "s|:%(bindir)s||g"`
   if ("$?PYTHONPATH" == "1" ) then
      setenv PYTHONPATH `echo $PYTHONPATH | perl -pe "s|:%(pythondir)s||g"`
   endif
endif

setenv EUPS_DIR %(eupsdir)s
if ("$?EUPS_PATH" == "0" ) then
    setenv EUPS_PATH ""
endif

# Set EUPS_PATH, appending any pre-existing EUPS_PATH (and only keeping
# one copy of each directory)
setenv EUPS_PATH `python -E -S` << EOT
%(unique_eups_path)s
EOT
# Set SETUP_EUPS so that a "setup eups" will remove this EUPS_DIR/bin from PATH
setenv SETUP_EUPS "eups"
# Deprecated variables
unsetenv PROD_DIR_PREFIX
unsetenv PRODUCTS

setenv PATH ${PATH}:%(bindir)s
if ("$?PYTHONPATH" == "1" ) then
   setenv PYTHONPATH ${PYTHONPATH}:%(pythondir)s
else
   setenv PYTHONPATH %(pythondir)s
endif

alias setup 'eval `%(setup)s \\!*`'
alias unsetup 'eval `%(setup)s --unsetup \\!*`'

""" % {"bindir" : bindir, "eupsdir" : eupsdir, "prefix" : prefix, \
           "pythondir" : pythondir, "setup" : setup,  "unique_eups_path" : unique_eups_path }

for s in setup_aliases.keys():
    print >> fd, "alias %s %s" % (setup_aliases[s], s)

del fd

print "Writing a sh startup script";
try:
    fd = open("setups.sh", "w")
except IOError, e:
    print >> sys.stderr, "Unable to open setups.sh: %s" % e
    sys.exit(1)

print >> fd, """
export EUPS_SHELL=sh

if [ "$EUPS_DIR" != "" ]; then
   PATH=`echo $PATH | perl -pe "s|:%(bindir)s||g"`
   PYTHONPATH=`echo $PYTHONPATH | perl -pe "s|:%(pythondir)s||g"`
fi

export EUPS_DIR=%(eupsdir)s
# Set EUPS_PATH, appending any pre-existing EUPS_PATH (and only keeping
# one copy of each directory)
export EUPS_PATH=`python -E -S -c '%(unique_path)s' "$EUPS_PATH" "%(prefix)s"`
# Set SETUP_EUPS so that a "setup eups" will remove this EUPS_DIR/bin from PATH
export SETUP_EUPS="eups"
# Deprecated variables
unset PROD_DIR_PREFIX
unset PRODUCTS

export PATH="$PATH:%(bindir)s"
if [ X"$PYTHONPATH" != X"" ]; then
    export PYTHONPATH="$PYTHONPATH:%(pythondir)s"
else
    export PYTHONPATH="%(pythondir)s"
fi

setup()   { eval `%(setup)s           "$@"`; }; export -f setup
unsetup() { eval `%(setup)s --unsetup "$@"`; }; export -f unsetup

[[ -n $BASH_COMPLETION ]] && [[ -f "$EUPS_DIR/etc/bash_completion.d/eups" ]] && source "$EUPS_DIR/etc/bash_completion.d/eups"
""" \
    % {"bindir" : bindir, "eupsdir" : eupsdir, "prefix" : prefix, \
           "pythondir" : pythondir, "setup" : setup,  "unique_path" : unique_path}

for s in setup_aliases.keys():
    print >> fd, "alias %s=%s" % (setup_aliases[s], s)

del fd

print "Creating zsh/dash startup script from sh one";
try:
    ifd = open("setups.sh", "r")
except IOError, e:
    print >> sys.stderr, "Unable to open setups.sh: %s" % e
    sys.exit(1)

try:
    ofd = open("setups.zsh", "w")
except IOError, e:
    print >> sys.stderr, "Unable to open setups.zsh: %s" % e
    sys.exit(1)

for line in ifd.readlines():
    line = re.sub(r"^export EUPS_SHELL=.*$", r"export EUPS_SHELL=zsh", line);
    line = re.sub(r"; export -f (:?un)?setup\s*$", r"\n", line);
    line = re.sub(r"^\[\[ .*$", r"\n", line);
    
    print >> ofd, line,

del ifd; del ofd

sys.exit(0)
